global
  crt-base  /etc/ssl/private
  daemon
  log /dev/log local0
  maxconn  4000
  pidfile  /var/run/haproxy.pid
  ssl-default-bind-ciphers  ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
  ssl-default-bind-options  no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
  tune.ssl.default-dh-param  2048
  stats  socket /var/run/haproxy.sock mode 600 level admin

defaults
  log  global
  maxconn  8000
  option  redispatch
  option  forwardfor
  retries  3
  timeout  http-request 10s
  timeout  queue 1m
  timeout  connect 10s
  timeout  client 1m
  timeout  server 1m
  timeout  check 10s

frontend web
  bind 0.0.0.0:443 ssl crt /etc/ssl/private/combined
  bind 0.0.0.0:80
  mode http
  option httplog
  maxconn  14000

  acl is_http ssl_fc, not
  acl is_https ssl_fc
  acl is_letsencrypt path_beg /.well-known/acme-challenge/

  # remove unnecessary response headers
  rspidel ^Server:.*
  rspidel ^X-Powered-By:.*

  # set a variable that we can access in the http-response context
  http-request set-var(txn.req_hdr_host) req.hdr(host)

  # set request headers so that the backend knows which port we use and if we
  # use https
  http-request add-header X-Forwarded-Proto https if is_https
  http-request set-header X-Forwarded-Port %[dst_port]

  http-request redirect scheme https if { req.hdr(host),lower,map_str(/usr/local/etc/haproxy/https-only-domains.map) -m found } is_http

  # set a header showing the request host
  http-response set-header Request-Header-Host %[var(txn.req_hdr_host)]
  # and one showing the backend we found in the backend map
  http-response set-header Request-Backend-Found %[var(txn.req_hdr_host),lower,map_str(/usr/local/etc/haproxy/domains-to-backends.map,not_found)]
  # set HSTS header if domain is in the HSTS map
  http-response set-header Strict-Transport-Security include_subdomains;\ preload;\ max-age=31536000; if { var(txn.req_hdr_host),lower,map_str(/usr/local/etc/haproxy/hsts-domains.map) -m found } is_https

  # find the right backend in the backend map, and default to not_found
  use_backend	%[req.hdr(host),lower,map_str(/usr/local/etc/haproxy/domains-to-backends.map,not_found)]

backend not_found
  mode http
  errorfile 503 /usr/local/etc/haproxy/errors/502.http

backend be_hello
  mode http
  server hello_0 127.0.0.1:8001 check maxconn 2
  server hello_1 127.0.0.1:8010 check maxconn 20
  server hello_2 127.0.0.1:8011 check
  server hello_3 127.0.0.1:8012 check
  server hello_4 127.0.0.1:8013 check
  server hello_5 127.0.0.1:8014 check
  server hello_6 127.0.0.1:8015 check
  server hello_7 127.0.0.1:8016 check
  server hello_8 127.0.0.1:8017 check
  server hello_9 127.0.0.1:8018 check

backend be_world
  mode http
  server world_0 127.0.0.1:8002 check

listen monitoring
  bind 0.0.0.0:63661            # don't do this!
  mode http
  stats enable
